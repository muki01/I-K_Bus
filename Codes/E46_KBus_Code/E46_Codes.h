/* -----------------------------------------------------------------------------
NOTE: The library automatically calculates and appends the checksum
to the transmitted data, so it is not included in the array above.
If you want to verify the checksum manually, you can use this tool:
https://www.scadacore.com/tools/programming-calculators/online-checksum-calculator/
Just click "Calculate" and then check the value shown under "CheckSum8 Xor".

Additionally, at the bottom of this file you will find the same data arrays
with pre-calculated checksums. If needed, you can comment out the arrays
without checksums and uncomment the ones with checksums to use them.
-----------------------------------------------------------------------------*/

/*
example IBUS message:
50 04 68 32 11 1F (volume up button pressed on the steering wheel)
|  |  |  |  |  |
|  |  |  |  |  checksum (xorsum of all previous bytes)
|  |  |  |  one or more data fields
|  |  |  message type/command type
|  |  destination address
|  length of message (including destination address and checksum)
source address
*/

// -----------------------------------------------------------------------------
// IBUS module ID's
static const uint8_t M_GM5 = 0x00;   // GM5: body control module
static const uint8_t M_DIA = 0x3F;   // DIA: diagnostic computer
static const uint8_t M_EWS = 0x44;   // EWS: immobilizer
static const uint8_t M_MFL = 0x50;   // MFL: steering wheel controls
static const uint8_t M_IHKA = 0x5B;  // IHKA: climate control panel
static const uint8_t M_RAD = 0x68;   // RAD: radio module
static const uint8_t M_IKE = 0x80;   // IKE: instrument cluster
static const uint8_t M_ALL = 0xBF;   // ALL: broadcast message
static const uint8_t M_TEL = 0xC8;   // TEL: telephone module
static const uint8_t M_LCM = 0xD0;   // LCM: light control module

// GM5 input/output addresses
static const uint8_t GM5_SET_IO = 0x0C;                     // "set IO" diagnostic command
static const uint8_t GM5_BTN_DOME_LIGHT = 0x01;             // dome light button
static const uint8_t GM5_BTN_CENTER_LOCK = 0x03;            // center console lock/unlock button
static const uint8_t GM5_BTN_TRUNK_OPEN = 0x05;             // interior trunk unlock button
static const uint8_t GM5_BTN_WINDOW_DRIVER_DOWN = 0x0A;     // driver window down button
static const uint8_t GM5_BTN_WINDOW_DRIVER_UP = 0x0B;       // driver window up button
static const uint8_t GM5_BTN_WINDOW_PASSENGER_DOWN = 0x0C;  // passenger window down button
static const uint8_t GM5_BTN_WINDOW_PASSENGER_UP = 0x0D;    // passenger window up button
static const uint8_t GM5_LED_ALARM_WARNING = 0x4E;          // red LED under interior mirror ("clown nose")

// GM5 state groups
static const uint8_t GM5_INPUT_STATE_DIGITAL = 0x00;  // request digital IO states
static const uint8_t GM5_INPUT_STATE_ANALOG = 0x01;   // request analog IO states

// -----------------------------------------------------------------------------
// Example Codes (VERSION WITHOUT CHECKSUM)

// Special Modes
// const byte ParkLights_And_Signals[13] PROGMEM = {0x3F, 0x0B, 0xBF, 0x0C, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06};
// const byte ParkLights_And_Signals_And_FogLights[13] PROGMEM = {0x3F, 0x0B, 0xBF, 0x0C, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x06};
// const byte FollowMeHome[13] PROGMEM = {0x3F, 0x0B, 0xBF, 0x0C, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x06};

// const byte ParkLights[13] PROGMEM = {0x3F, 0x0B, 0xBF, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x02, 0x08, 0x00, 0x06};
// const byte ParkLights_And_Signals[13] PROGMEM = {0x3F, 0x0B, 0xBF, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x62, 0x48, 0x0A, 0x06};
// const byte ParkLights_And_Signals_And_FogLights[13] PROGMEM = {0x3F, 0x0B, 0xBF, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x62, 0x48, 0x0B, 0x06};

const byte TurnOffLights[17] PROGMEM = {0x3F, 0x0F, 0xD0, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0xE4, 0xFF, 0x00};
const byte ParkLights_And_Signals[13] PROGMEM = {0x3F, 0x0B, 0xBF, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x7A, 0x48, 0x0A, 0x06};
const byte ParkLights_And_Signals_And_FogLights[13] PROGMEM = {0x3F, 0x0B, 0xBF, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x7A, 0x48, 0x0B, 0x06};
const byte Low_Beams[13] PROGMEM = {0x3F, 0x0B, 0xBF, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x02, 0x4E, 0x0A, 0x06};
const byte FollowMeHome[13] PROGMEM = {0x3F, 0x0B, 0xBF, 0x0C, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x06};
const byte GoodbyeLights[13] PROGMEM = {0x3F, 0x0B, 0xBF, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x62, 0x08, 0xA0, 0x06};

// const byte Sunroof_Open_Unlock[7] PROGMEM = {0xBF, 0x7D, 0x00, 0x05, 0x00, 0x30}; // Open sunroof and possibly unlock
// const byte Sunroof_Open_Lock[7] PROGMEM = {0xBF, 0x7D, 0x00, 0x05, 0x00, 0x20}; // Open sunroof and lock
// const byte Sunroof_Close_Unlock[7] PROGMEM = {0xBF, 0x7D, 0x00, 0x05, 0x00, 0x70}; // Close sunroof and possibly unlock
// const byte Sunroof_Close_Lock[7] PROGMEM = {0xBF, 0x7D, 0x00, 0x05, 0x00, 0x60}; // Close sunroof and lock
// const byte Sliding_Lock[7] PROGMEM = {0xBF, 0x7D, 0x00, 0x05, 0x00, 0x00}; // Sliding lock
// const byte Sliding_Unlock[7] PROGMEM = {0xBF, 0x7D, 0x00, 0x05, 0x00, 0x10}; // Sliding unlock
// const byte Sunroof_Open_Piece[7] PROGMEM = {0x3F, 0x05, 0x00, 0x0C, 0x7E, 0x01}; // sunroof open a piece
// const byte Sunroof_Close_Piece[7] PROGMEM = {0x3F, 0x05, 0x00, 0x0C, 0x7F, 0x01}; // sunroof close a piece

const byte Window_FrontDriver_Open[7] PROGMEM = {0x3F, 0x05, 0x00, 0x0C, 0x52, 0x01};      // open driver's side front window a piece
const byte Window_FrontDriver_Close[7] PROGMEM = {0x3F, 0x05, 0x00, 0x0C, 0x53, 0x01};     // windows on the front driver's side close a piece
const byte Window_FrontPassenger_Open[7] PROGMEM = {0x3F, 0x05, 0x00, 0x0C, 0x54, 0x01};   // windows on the front passenger side open a piece
const byte Window_FrontPassenger_Close[7] PROGMEM = {0x3F, 0x05, 0x00, 0x0C, 0x55, 0x01};  // windows on the front passenger side close a piece
const byte Window_RearDriver_Open[7] PROGMEM = {0x3F, 0x05, 0x00, 0x0C, 0x41, 0x01};       // open driver's side rear window a piece
const byte Window_RearDriver_Close[7] PROGMEM = {0x3F, 0x05, 0x00, 0x0C, 0x42, 0x01};      // windows close rear driver's side a piece
const byte Window_RearPassenger_Open[7] PROGMEM = {0x3F, 0x05, 0x00, 0x0C, 0x44, 0x01};    // windows open rear passenger side a piece
const byte Window_RearPassenger_Close[7] PROGMEM = {0x3F, 0x05, 0x00, 0x0C, 0x43, 0x01};   // windows close rear passenger side a piece

// const byte Interior_Dim[6] PROGMEM = {0xBF, 0x80, 0x04, 0x11, 0x00}; // Innenraumbel. dimming
const byte Interior_Off[7] PROGMEM = {0x3F, 0x05, 0x00, 0x0C, 0x01, 0x01};     // Innenraumbel. turn off
const byte Interior_Dim2[7] PROGMEM = {0x3F, 0x05, 0x00, 0x0C, 0x30, 0x01};    // ? + Innenraumbel. dimming
const byte Interior_On3s[7] PROGMEM = {0x3F, 0x05, 0x00, 0x0C, 0x60, 0x01};    // Innenraumbel. turn on for 3 seconds (no fade)
const byte Interior_OffDim[7] PROGMEM = {0x3F, 0x05, 0x00, 0x0C, 0x68, 0x01};  // Innenraumbel. off and dim

const byte Doors_Unlock_Interior[7] PROGMEM = {0x3F, 0x05, 0x00, 0x0C, 0x03, 0x01};  // Doors unlock (button pressed @ Interior)
const byte Doors_Lock_Key[7] PROGMEM = {0x3F, 0x05, 0x00, 0x0C, 0x34, 0x01};         // doors lock (key pressed)
const byte Doors_Fuel_Trunk[7] PROGMEM = {0x3F, 0x05, 0x00, 0x0C, 0x46, 0x01};       // doors + fuel cap hardlock, open trunk
const byte DriverDoor_Lock[7] PROGMEM = {0x3F, 0x05, 0x00, 0x0C, 0x47, 0x01};        // driver's door lock
const byte AllExceptDriver_Lock[7] PROGMEM = {0x3F, 0x05, 0x00, 0x0C, 0x4F, 0x01};   // all doors except driver's door lock
const byte Doors_HardLock[7] PROGMEM = {0x3F, 0x05, 0x00, 0x0C, 0x97, 0x01};         // doors lock (hardlock)

const byte Trunk_Open[7] PROGMEM = {0x3F, 0x05, 0x00, 0x0C, 0x02, 0x01};   // trunk open
const byte Trunk_Open2[7] PROGMEM = {0x3F, 0x05, 0x00, 0x0C, 0x05, 0x01};  // Open the trunk (again)
const byte Trunk_Open3[7] PROGMEM = {0x3F, 0x05, 0x00, 0x0C, 0x95, 0x01};  // Open the trunk (again)

const byte Wipers_Front[7] PROGMEM = {0x3F, 0x05, 0x00, 0x0C, 0x49, 0x01};  // Windshield wipers front
const byte Washer_Front[7] PROGMEM = {0x3F, 0x05, 0x00, 0x0C, 0x62, 0x01};  // Windshield washer front spraying

// const byte Flashing_Warning[7] PROGMEM = {0x08, 0x00, 0x04, 0xBF, 0x76}; // Flashing: 2 = warning lights, 4 = low beam, high beam 8
const byte Hazard_IKE_LCM[7] PROGMEM = {0x3F, 0x05, 0x00, 0x0C, 0x70, 0x01};  // hazard lights (IKE + LCM) + Innenraumbel. dim
const byte Hazard_LCM_3s[7] PROGMEM = {0x3F, 0x05, 0x00, 0x0C, 0x75, 0x01};   // hazard lights (LCM) for 3 seconds
const byte Fog[13] PROGMEM = {0x3F, 0x0B, 0xBF, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x06};                // Fog
const byte LeftTail[13] PROGMEM = {0x3F, 0x0B, 0xBF, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x06};           // left tail light (+ A)
const byte RearLight[13] PROGMEM = {0x3F, 0x0B, 0xBF, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x06};          // rear light (+ A)
const byte Brake_Above[13] PROGMEM = {0x3F, 0x0B, 0xBF, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x06};        // brake light above
const byte Brake_Left[13] PROGMEM = {0x3F, 0x0B, 0xBF, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x06};         // brake light left (+ A)
const byte Brake_Right[13] PROGMEM = {0x3F, 0x0B, 0xBF, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x06};        // Brake Light Right (+ A)
const byte FrontRightLowBeam[13] PROGMEM = {0x3F, 0x0B, 0xBF, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x06};  // front right low beam
const byte FrontLeftLowBeam[13] PROGMEM = {0x3F, 0x0B, 0xBF, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x06};   // low beam, front left
const byte LowBeamDelayed[13] PROGMEM = {0x3F, 0x0B, 0xBF, 0x0C, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06};     // low beam delayed front + rear
const byte MainBeamLeft[13] PROGMEM = {0x3F, 0x0B, 0xBF, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x06};  // Main beam left + low beams on both sides
const byte HighBeamRightLow[13] PROGMEM = {0x3F, 0x0B, 0xBF, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x06};  // high beams on both sides of the right low beam
const byte IgnitionLowBeam[13] PROGMEM = {0x3F, 0x0B, 0xBF, 0x0C, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x06};  // ignition at low beam + beam (IKE + LCM)
const byte LeftRearContin[13] PROGMEM = {0x3F, 0x0B, 0xBF, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x06};  // Left Rear lights continuously (+ A)
const byte RightRearContin[13] PROGMEM = {0x3F, 0x0B, 0xBF, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x06};  // Right rear turn signal lights continuously (+ A)
const byte LeftFrontTurnContin[13] PROGMEM = {0x3F, 0x0B, 0xBF, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x06};  // left front turn signal lights continuously (+ A)
const byte RightFrontTurnContin[13] PROGMEM = {0x3F, 0x0B, 0xBF, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x06};  // Indicator lights permanently front right (+ A)
const byte LeftParking[13] PROGMEM = {0x3F, 0x0B, 0xBF, 0x0C, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x06};   // left parking light
const byte RightParking[13] PROGMEM = {0x3F, 0x0B, 0xBF, 0x0C, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x06};  // right parking light
const byte HazardLights[13] PROGMEM = {0x3F, 0x0B, 0xBF, 0x0C, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06};  // hazard lights

const byte AvgSpeedDelete[7] PROGMEM = {0x3B, 0x05, 0x80, 0x41, 0x10, 0x0A};        // average speed delete
const byte RequestMileage[6] PROGMEM = {0xBF, 0x03, 0x80, 0x16};                    // Request mileage
const byte SpeedLimitBeep[7] PROGMEM = {0x3B, 0x06, 0x80, 0x40, 0x09, 0x00, 0x??};  // speed limit set (beep is exceeded)     !!!!!!!!!!!!!!!!!!! Last Byte
const byte SpeedLimitCurrent[7] PROGMEM = {0x3B, 0x05, 0x80, 0x41, 0x09, 0x20};     // speed limit set on current speed
const byte SpeedLimitDisable[7] PROGMEM = {0x3B, 0x05, 0x80, 0x41, 0x09, 0x08};     // Disable adjusted speed limit

const byte Remote_CloseButton[7] PROGMEM = {0x00, 0x04, 0xBF, 0x72, 0x16};    // Pressed close button on remote control
const byte Remote_OpenButton[7] PROGMEM = {0x00, 0x04, 0xBF, 0x72, 0x26};     // pushed open button on remote control
const byte Remote_ReleaseButton[7] PROGMEM = {0x00, 0x04, 0xBF, 0x72, 0x06};  // release button on remote control

const byte KEY_IN[7] PROGMEM = {0x44, 0x05, 0xBF, 0x74, 0x04, 0x00};   // Ignition key in    Last Byte = Key Number
const byte KEY_OUT[7] PROGMEM = {0x44, 0x05, 0xBF, 0x74, 0x00, 0xFF};  // Ignition key out
const byte IGNITION_OFF[6] PROGMEM = {0x80, 0x04, 0xBF, 0x11, 0x00};   // Ignition Off
const byte IGNITION_POS1[6] PROGMEM = {0x80, 0x04, 0xBF, 0x11, 0x01};  // Ignition position 1
const byte IGNITION_POS2[6] PROGMEM = {0x80, 0x04, 0xBF, 0x11, 0x03};  // Ignition On position 2
const byte REMOTE_UNLOCK[6] PROGMEM = {0x00, 0x04, 0xBF, 0x72, 0x22};  // Remote control unlock
const byte REMOTE_LOCK[6] PROGMEM = {0x00, 0x04, 0xBF, 0x72, 0x12};    // Remote control lock

const byte MFL_VOL_UP[6] PROGMEM = {0x50, 0x04, 0x68, 0x32, 0x11};          // Steering wheel Volume Up
const byte MFL_VOL_DOWN[6] PROGMEM = {0x50, 0x04, 0x68, 0x32, 0x10};        // Steering wheel Volume Down
const byte MFL_TEL_VOL_UP[6] PROGMEM = {0x50, 0x04, 0xC8, 0x32, 0x11};      // Steering wheel Volume Up - Telephone
const byte MFL_TEL_VOL_DOWN[6] PROGMEM = {0x50, 0x04, 0xC8, 0x32, 0x10};    // Steering wheel Volume Down - Telephone
const byte MFL_SES_PRESS[6] PROGMEM = {0x50, 0x04, 0xB0, 0x3B, 0x80};       // Steering wheel press and hold phone button
const byte MFL_SEND_END_PRESS[6] PROGMEM = {0x50, 0x04, 0xC8, 0x3B, 0x80};  // Steering wheel send/end press
const byte MFL_RT_PRESS[6] PROGMEM = {0x50, 0x04, 0x68, 0x3B, 0x02};        // MFL R/T press

const byte CD_STOP[7] PROGMEM = {0x68, 0x05, 0x18, 0x38, 0x01, 0x00};                                        // CD Stop command
const byte CD_PLAY[7] PROGMEM = {0x68, 0x05, 0x18, 0x38, 0x03, 0x00};                                        // CD Play command
const byte CD_PAUSE[7] PROGMEM = {0x68, 0x05, 0x18, 0x38, 0x02, 0x00};                                       // CD Pause command
const byte CD_STOP_STATUS[12] PROGMEM = {0x18, 0x0A, 0x68, 0x39, 0x00, 0x02, 0x00, 0x3F, 0x00, 0x07, 0x01};  // CD stop request
const byte CD_PLAY_STATUS[12] PROGMEM = {0x18, 0x0A, 0x68, 0x39, 0x02, 0x09, 0x00, 0x3F, 0x00, 0x07, 0x01};  // CD play request

const byte INCOMING_CALL[6] PROGMEM = {0xC8, 0x04, 0xE7, 0x2C, 0x05};       // Incoming phone call
const byte PHONE_ON[6] PROGMEM = {0xC8, 0x04, 0xE7, 0x2C, 0x10};            // Phone On
const byte HANDSFREE_PHONE_ON[6] PROGMEM = {0xC8, 0x04, 0xE7, 0x2C, 0x11};  // Hands Free Phone On
const byte ACTIVE_CALL[6] PROGMEM = {0xC8, 0x04, 0xE7, 0x2C, 0x33};         // Active phone call

const byte DSP_STATUS_REQUEST[5] PROGMEM = {0x68, 0x03, 0x6A, 0x01};          // DSP status request
const byte DSP_STATUS_REPLY[6] PROGMEM = {0x6A, 0x04, 0xFF, 0x02, 0x00};      // DSP status reply
const byte DSP_STATUS_REPLY_RST[6] PROGMEM = {0x6A, 0x04, 0xFF, 0x02, 0x01};  // DSP status ready after reset to LOC
const byte DSP_VOL_UP_1[6] PROGMEM = {0x68, 0x04, 0x6A, 0x32, 0x11};          // Rotary Volume Up 1 step
const byte DSP_VOL_UP_2[6] PROGMEM = {0x68, 0x04, 0x6A, 0x32, 0x21};          // Rotary Volume Up 2 step
const byte DSP_VOL_UP_3[6] PROGMEM = {0x68, 0x04, 0x6A, 0x32, 0x31};          // Rotary Volume Up 3 step
const byte DSP_VOL_DOWN_1[6] PROGMEM = {0x68, 0x04, 0x6A, 0x32, 0x10};        // Rotary Volume Down 1 step
const byte DSP_VOL_DOWN_2[6] PROGMEM = {0x68, 0x04, 0x6A, 0x32, 0x20};        // Rotary Volume Down 2 step
const byte DSP_VOL_DOWN_3[6] PROGMEM = {0x68, 0x04, 0x6A, 0x32, 0x30};        // Rotary Volume Down 3 step
const byte DSP_FUNC_0[6] PROGMEM = {0x68, 0x04, 0x6A, 0x36, 0x30};            // DSP_Function 0
const byte DSP_FUNC_1[6] PROGMEM = {0x68, 0x04, 0x6A, 0x36, 0xE1};            // DSP_Function 1
const byte DSP_SRCE_OFF[6] PROGMEM = {0x68, 0x04, 0x6A, 0x36, 0xAF};          // DSP Source = OFF
const byte DSP_SRCE_CD[6] PROGMEM = {0x68, 0x04, 0x6A, 0x36, 0xA0};           // DSP Source = CD
const byte DSP_SRCE_TUNER[6] PROGMEM = {0x68, 0x04, 0x6A, 0x36, 0xA1};        // DSP Source = Tuner

const byte GO_TO_RADIO[6] PROGMEM = {0x68, 0x04, 0xFF, 0x3B, 0x00};         // Go  to radio - I think
const byte REQUEST_TIME[7] PROGMEM = {0x68, 0x05, 0x80, 0x41, 0x01, 0x01};  // Request current time from IKE
const byte CLOWN_FLASH[7] PROGMEM = {0x3F, 0x05, 0x00, 0x0C, 0x4E, 0x01};   // Turn on clown nose for 3 seconds
const byte BACK_ONE[7] PROGMEM = {0x68, 0x05, 0x18, 0x38, 0x08, 0x00};      // Back
const byte BACK_TWO[7] PROGMEM = {0x68, 0x05, 0x18, 0x38, 0x08, 0x01};      // Back
const byte LEFT[7] PROGMEM = {0x68, 0x05, 0x18, 0x38, 0x0A, 0x01};          // Left
const byte RIGHT[7] PROGMEM = {0x68, 0x05, 0x18, 0x38, 0x0A, 0x00};         // Right
const byte SELECT[7] PROGMEM = {0x68, 0x05, 0x18, 0x38, 0x07, 0x01};        // Select
const byte BUTTON_ONE[7] PROGMEM = {0x68, 0x05, 0x18, 0x38, 0x06, 0x01};    // Button 1
const byte BUTTON_TWO[7] PROGMEM = {0x68, 0x05, 0x18, 0x38, 0x06, 0x02};    // Button 2
const byte BUTTON_THREE[7] PROGMEM = {0x68, 0x05, 0x18, 0x38, 0x06, 0x03};  // Button 3
const byte BUTTON_FOUR[7] PROGMEM = {0x68, 0x05, 0x18, 0x38, 0x06, 0x04};   // Button 4
const byte BUTTON_FIVE[7] PROGMEM = {0x68, 0x05, 0x18, 0x38, 0x06, 0x05};   // Button 5
const byte BUTTON_SIX[7] PROGMEM = {0x68, 0x05, 0x18, 0x38, 0x06, 0x06};    // Button 6

const byte CDC_STATUS_REPLY_RST[6] PROGMEM = {0x18, 0x04, 0xFF, 0x02, 0x01};  // CDC status ready after reset to LOC
const byte CDC_STATUS_REQUEST[5] PROGMEM = {0x68, 0x03, 0x18, 0x01};          // CDC status request
const byte CDC_STATUS_REPLY[6] PROGMEM = {0x18, 0x04, 0xFF, 0x02, 0x00};      // CDC status reply
const byte CD_STATUS[16] PROGMEM = {0x18, 0x0E, 0x68, 0x39, 0x00, 0x82, 0x00, 0x3F, 0x00, 0x07, 0x00, 0x00, 0x01, 0x01, 0x01};  // CD status
const byte BUTTON_PRESSED[6] PROGMEM = {0x68, 0x04, 0xFF, 0x3B, 0x00};  // Radio/Telephone control, No_buttons_pressed
const byte VOL_INCREMENT[64] PROGMEM = {
    0,   68,  70,  72,  74,  76,  78,  80,  82,  84,  86,  88,  90,  92,  94,  96,  98,  100, 102, 104, 106, 108,
    110, 112, 114, 116, 118, 120, 122, 124, 126, 128, 130, 132, 134, 136, 138, 140, 142, 144, 146, 148, 150, 152,
    154, 156, 158, 160, 162, 164, 166, 168, 170, 172, 174, 176, 178, 180, 182, 184, 186, 188, 190, 192};  // Volume increments

// -----------------------------------------------------------------------------
// Example Codes (VERSION WITH CHECKSUM)

// Special Modes
// const byte ParkLights_And_Signals[13] PROGMEM = {0x3F, 0x0B, 0xBF, 0x0C, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x01};
// const byte ParkLights_And_Signals_And_FogLights[13] PROGMEM = {0x3F, 0x0B, 0xBF, 0x0C, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x06, 0x00};
// const byte FollowMeHome[13] PROGMEM = {0x3F, 0x0B, 0xBF, 0x0C, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x06, 0x01};

// const byte ParkLights[13] PROGMEM = {0x3F, 0x0B, 0xBF, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x02, 0x08, 0x00, 0x06, 0x8B};
// const byte ParkLights_And_Signals[13] PROGMEM = {0x3F, 0x0B, 0xBF, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x62, 0x48, 0x0A, 0x06, 0xA1};
// const byte ParkLights_And_Signals_And_FogLights[13] PROGMEM = {0x3F, 0x0B, 0xBF, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x62, 0x48, 0x0B, 0x06, 0xA0};

// const byte TurnOffLights[17] PROGMEM = {0x3F, 0x0F, 0xD0, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0xE4, 0xFF, 0x00, 0xB7};
// const byte ParkLights_And_Signals[13] PROGMEM = {0x3F, 0x0B, 0xBF, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x7A, 0x48, 0x0A, 0x06, 0xB9};
// const byte ParkLights_And_Signals_And_FogLights[13] PROGMEM = {0x3F, 0x0B, 0xBF, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x7A, 0x48, 0x0B, 0x06, 0xB8};
// const byte Low_Beams[13] PROGMEM = {0x3F, 0x0B, 0xBF, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x02, 0x4E, 0x0A, 0x06, 0xC7};
// const byte FollowMeHome[13] PROGMEM = {0x3F, 0x0B, 0xBF, 0x0C, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x06, 0x01};
// const byte GoodbyeLights[13] PROGMEM = {0x3F, 0x0B, 0xBF, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x62, 0x08, 0xA0, 0x06, 0x4B};

// const byte KEY_IN[7] PROGMEM = {0x44, 0x05, 0xBF, 0x74, 0x04, 0x00, 0x8E};  // Ignition key in
// const byte KEY_OUT[7] PROGMEM = {0x44, 0x05, 0xBF, 0x74, 0x00, 0xFF, 0x75}; // Ignition key out
// const byte IGNITION_OFF[6] PROGMEM = {0x80, 0x04, 0xBF, 0x11, 0x00, 0x2A};  // Ignition Off
// const byte IGNITION_POS1[6] PROGMEM = {0x80, 0x04, 0xBF, 0x11, 0x01, 0x2B}; // Ignition position 1
// const byte IGNITION_POS2[6] PROGMEM = {0x80, 0x04, 0xBF, 0x11, 0x03, 0x29}; // Ignition On position 2
// const byte REMOTE_UNLOCK[6] PROGMEM = {0x00, 0x04, 0xBF, 0x72, 0x22, 0xEB}; // Remote control unlock
// const byte REMOTE_LOCK[6] PROGMEM = {0x00, 0x04, 0xBF, 0x72, 0x12, 0xDB};   // Remote control lock

// const byte MFL_VOL_UP[6] PROGMEM = {0x50, 0x04, 0x68, 0x32, 0x11, 0x1F};         // Steering wheel Volume Up
// const byte MFL_VOL_DOWN[6] PROGMEM = {0x50, 0x04, 0x68, 0x32, 0x10, 0x1E};       // Steering wheel Volume Down
// const byte MFL_TEL_VOL_UP[6] PROGMEM = {0x50, 0x04, 0xC8, 0x32, 0x11, 0xBF};     // Steering wheel Volume Up - Telephone
// const byte MFL_TEL_VOL_DOWN[6] PROGMEM = {0x50, 0x04, 0xC8, 0x32, 0x10, 0xBE};   // Steering wheel Volume Down - Telephone
// const byte MFL_SES_PRESS[6] PROGMEM = {0x50, 0x04, 0xB0, 0x3B, 0x80, 0x5F};      // Steering wheel press and hold phone button
// const byte MFL_SEND_END_PRESS[6] PROGMEM = {0x50, 0x04, 0xC8, 0x3B, 0x80, 0x27}; // Steering wheel send/end press
// const byte MFL_RT_PRESS[6] PROGMEM = {0x50, 0x04, 0x68, 0x3B, 0x02, 0x05};       // MFL R/T press

// const byte CD_STOP[7] PROGMEM = {0x68, 0x05, 0x18, 0x38, 0x01, 0x00, 0x4C};                                       // CD Stop command
// const byte CD_PLAY[7] PROGMEM = {0x68, 0x05, 0x18, 0x38, 0x03, 0x00, 0x4E};                                       // CD Play command
// const byte CD_PAUSE[7] PROGMEM = {0x68, 0x05, 0x18, 0x38, 0x02, 0x00, 0x4F};                                      // CD Pause command
// const byte CD_STOP_STATUS[12] PROGMEM = {0x18, 0x0A, 0x68, 0x39, 0x00, 0x02, 0x00, 0x3F, 0x00, 0x07, 0x01, 0x78}; // CD stop request
// const byte CD_PLAY_STATUS[12] PROGMEM = {0x18, 0x0A, 0x68, 0x39, 0x02, 0x09, 0x00, 0x3F, 0x00, 0x07, 0x01, 0x71}; // CD play request

// const byte INCOMING_CALL[6] PROGMEM = {0xC8, 0x04, 0xE7, 0x2C, 0x05, 0x02};      // Incoming phone call
// const byte PHONE_ON[6] PROGMEM = {0xC8, 0x04, 0xE7, 0x2C, 0x10, 0x17};           // Phone On
// const byte HANDSFREE_PHONE_ON[6] PROGMEM = {0xC8, 0x04, 0xE7, 0x2C, 0x11, 0x16}; // Hands Free Phone On
// const byte ACTIVE_CALL[6] PROGMEM = {0xC8, 0x04, 0xE7, 0x2C, 0x33, 0x34};        // Active phone call

// const byte DSP_STATUS_REQUEST[5] PROGMEM = {0x68, 0x03, 0x6A, 0x01, 0x00};         // DSP status request
// const byte DSP_STATUS_REPLY[6] PROGMEM = {0x6A, 0x04, 0xFF, 0x02, 0x00, 0x93};     // DSP status reply
// const byte DSP_STATUS_REPLY_RST[6] PROGMEM = {0x6A, 0x04, 0xFF, 0x02, 0x01, 0x92}; // DSP status ready after reset to LOC
// const byte DSP_VOL_UP_1[6] PROGMEM = {0x68, 0x04, 0x6A, 0x32, 0x11, 0x25};         // Rotary Volume Up 1 step
// const byte DSP_VOL_UP_2[6] PROGMEM = {0x68, 0x04, 0x6A, 0x32, 0x21, 0x15};         // Rotary Volume Up 2 step
// const byte DSP_VOL_UP_3[6] PROGMEM = {0x68, 0x04, 0x6A, 0x32, 0x31, 0x05};         // Rotary Volume Up 3 step
// const byte DSP_VOL_DOWN_1[6] PROGMEM = {0x68, 0x04, 0x6A, 0x32, 0x10, 0x24};       // Rotary Volume Down 1 step
// const byte DSP_VOL_DOWN_2[6] PROGMEM = {0x68, 0x04, 0x6A, 0x32, 0x20, 0x14};       // Rotary Volume Down 2 step
// const byte DSP_VOL_DOWN_3[6] PROGMEM = {0x68, 0x04, 0x6A, 0x32, 0x30, 0x04};       // Rotary Volume Down 3 step
// const byte DSP_FUNC_0[6] PROGMEM = {0x68, 0x04, 0x6A, 0x36, 0x30, 0x00};           // DSP_Function 0
// const byte DSP_FUNC_1[6] PROGMEM = {0x68, 0x04, 0x6A, 0x36, 0xE1, 0xD1};           // DSP_Function 1
// const byte DSP_SRCE_OFF[6] PROGMEM = {0x68, 0x04, 0x6A, 0x36, 0xAF, 0x9F};         // DSP Source = OFF
// const byte DSP_SRCE_CD[6] PROGMEM = {0x68, 0x04, 0x6A, 0x36, 0xA0, 0x90};          // DSP Source = CD
// const byte DSP_SRCE_TUNER[6] PROGMEM = {0x68, 0x04, 0x6A, 0x36, 0xA1, 0x91};       // DSP Source = Tuner

// const byte GO_TO_RADIO[6] PROGMEM = {0x68, 0x04, 0xFF, 0x3B, 0x00, 0xA8};        // Go  to radio - I think
// const byte REQUEST_TIME[7] PROGMEM = {0x68, 0x05, 0x80, 0x41, 0x01, 0x01, 0xAC}; // Request current time from IKE
// const byte CLOWN_FLASH[7] PROGMEM = {0x3F, 0x05, 0x00, 0x0C, 0x4E, 0x01, 0x79};  // Turn on clown nose for 3 seconds
// const byte BACK_ONE[7] PROGMEM = {0x68, 0x05, 0x18, 0x38, 0x08, 0x00, 0x45};     // Back
// const byte BACK_TWO[7] PROGMEM = {0x68, 0x05, 0x18, 0x38, 0x08, 0x01, 0x44};     // Back
// const byte LEFT[7] PROGMEM = {0x68, 0x05, 0x18, 0x38, 0x0A, 0x01, 0x46};         // Left
// const byte RIGHT[7] PROGMEM = {0x68, 0x05, 0x18, 0x38, 0x0A, 0x00, 0x47};        // Right
// const byte SELECT[7] PROGMEM = {0x68, 0x05, 0x18, 0x38, 0x07, 0x01, 0x4B};       // Select
// const byte BUTTON_ONE[7] PROGMEM = {0x68, 0x05, 0x18, 0x38, 0x06, 0x01, 0x4A};   // Button 1
// const byte BUTTON_TWO[7] PROGMEM = {0x68, 0x05, 0x18, 0x38, 0x06, 0x02, 0x49};   // Button 2
// const byte BUTTON_THREE[7] PROGMEM = {0x68, 0x05, 0x18, 0x38, 0x06, 0x03, 0x48}; // Button 3
// const byte BUTTON_FOUR[7] PROGMEM = {0x68, 0x05, 0x18, 0x38, 0x06, 0x04, 0x4F};  // Button 4
// const byte BUTTON_FIVE[7] PROGMEM = {0x68, 0x05, 0x18, 0x38, 0x06, 0x05, 0x4E};  // Button 5
// const byte BUTTON_SIX[7] PROGMEM = {0x68, 0x05, 0x18, 0x38, 0x06, 0x06, 0x4D};   // Button 6

// const byte CDC_STATUS_REPLY_RST[6] PROGMEM = {0x18, 0x04, 0xFF, 0x02, 0x01, 0xE0};                                                   // CDC status
// ready after reset to LOC const byte CDC_STATUS_REQUEST[5] PROGMEM = {0x68, 0x03, 0x18, 0x01, 0x72}; // CDC status request const byte
// CDC_STATUS_REPLY[6] PROGMEM = {0x18, 0x04, 0xFF, 0x02, 0x00, 0xE1};                                                       // CDC status reply const
// byte CD_STATUS[16] PROGMEM = {0x18, 0x0E, 0x68, 0x39, 0x00, 0x82, 0x00, 0x3F, 0x00, 0x07, 0x00, 0x00, 0x01, 0x01, 0x01, 0xFC}; // CD status const
// byte BUTTON_PRESSED[6] PROGMEM = {0x68, 0x04, 0xFF, 0x3B, 0x00, 0xA8};                                                         // Radio/Telephone
// control, No_buttons_pressed const byte VOL_INCREMENT[64] PROGMEM = {
//     0, 68, 70, 72, 74, 76, 78, 80, 82, 84, 86, 88, 90, 92, 94, 96, 98, 100, 102, 104, 106, 108, 110, 112, 114, 116, 118, 120, 122, 124, 126,
//     128, 130, 132, 134, 136, 138, 140, 142, 144, 146, 148, 150, 152, 154, 156, 158, 160, 162, 164, 166, 168, 170, 172, 174, 176,
//     178, 180, 182, 184, 186, 188, 190, 192}; // Volume increments